# Set the build name which will define the Build Number
name: 1.2$(Rev:.r)

pr:
  - main

trigger:
  branches:
    include:
      - "main"

# Set the agent pool that stages should be run in
pool:
  vmImage: ubuntu-24.04

variables:
  - template: azuredevops-vars.yml

# Configure the stages
stages:
  - stage: Docs
    jobs:
      - job: GenerateDocs
        displayName: Generate Documentation

        steps:
          - template: templates/setup.yaml
            parameters:
              TaskctlVersion: ${{ variables.TaskctlVersion }}

          - task: Bash@3
            displayName: Pull Dotnet Image
            inputs:
              targetType: inline
              script: |
                taskctl image-pull-docs

          # Generate the documentation
          - task: Bash@3
            displayName: Generate Documentation
            inputs:
              targetType: inline
              script: |
                taskctl docs

            # Upload the documentation
          - task: PublishBuildArtifacts@1
            displayName: Publish Documentation
            inputs:
              pathToPublish: $(Build.SourcesDirectory)/outputs/docs
              artifactName: docs

  - stage: Build
    jobs:
      - job: UnitTests
        steps:
          - template: templates/setup.yaml
            parameters:
              TaskctlVersion: ${{ variables.TaskctlVersion }}

          - task: Bash@3
            displayName: Pull Powershell Image
            inputs:
              targetType: inline
              script: |
                taskctl image-pull

          - task: Bash@3
            displayName: Pull Dotnet Image
            inputs:
              targetType: inline
              script: |
                taskctl image-pull-dotnet

          # Ensure that no outputs already exist
          - task: Bash@3
            displayName: Clean outputs
            inputs:
              targetType: inline
              script: |
                taskctl clean

          # Run the Taskctl pipeline to execute the tests
          - task: Bash@3
            displayName: Execute tests
            inputs:
              targetType: inline
              script: |
                taskctl tests

          # Run the task to generate the PowerShell module files
          - task: Bash@3
            displayName: Generate PowerShell Module
            inputs:
              targetType: inline
              script: |
                taskctl build

          # Munges the file paths by replacing the bound `/app` directory with the $(Build.SourcesDirectory) variable where the files are
          - task: Bash@3
            condition: always()
            displayName: Updates paths to files outside of TaskCTL Docker Contexts on the Host
            inputs:
              targetType: inline
              script: |
                sudo sed -i 's%/eirctl/src/%$(Build.SourcesDirectory)/src/%' $(Build.SourcesDirectory)/outputs/tests/Cobertura.xml

          # Upload tests and the coverage results
          - task: PublishTestResults@2
            condition: always()
            inputs:
              testResultsFormat: NUnit
              testResultsFiles: "**/pester-unittest-results.xml"
              testRunTitle: UnitTests

          - task: PublishCodeCoverageResults@1
            condition: always()
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(Build.SourcesDirectory)/outputs/tests/Cobertura.xml

          # Upload the module files
          - task: PublishBuildArtifacts@1
            displayName: Publish Modules
            inputs:
              pathToPublish: $(Build.SourcesDirectory)/outputs/module
              artifactName: modules

  - stage: Release
    dependsOn:
      - Build
      - Docs
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    jobs:
      - job: Publish
        steps:
          # Download the necessary artifacts from the previous stage
          # - documentation
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: "docs"
              patterns: "**/*.pdf"
              path: $(Build.SourcesDirectory)/artifacts/docs

          # - module
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: "modules"
              path: $(Build.SourcesDirectory)/artifacts/modules

          - template: templates/setup.yaml
            parameters:
              TaskctlVersion: ${{ variables.TaskctlVersion }}

          - task: Bash@3
            displayName: Pull Powershell Image
            inputs:
              targetType: inline
              script: |
                taskctl image-pull

          - task: Bash@3
            displayName: Publish Release
            inputs:
              targetType: inline
              script: |
                taskctl release
            env:
              STAGE: release
              PUBLISH_RELEASE: "true"
              DASHBOARD_INFLUX_TOKEN: $(DASHBOARD_INFLUX_TOKEN) # requires explicit mapping to be used as an env var
              VERSION_NUMBER: $(BUILD_BUILDNUMBER)
