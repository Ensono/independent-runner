
# Set the build name which will define the Build Number
name: 0.0$(Rev:.r)

# Set the agent pool that stages should be run in
pool:
  vmImage: ubuntu-20.04

variables:
  - template: azuredevops-vars.yml

# Configure the stages
stages:

  - stage: Build

    jobs:

    - job: UnitTests

      steps:

        # Install Taskctl for the build to run
        - task: Bash@3
          displayName: Install Taskctl
          inputs:
            targetType: inline
            script: |
              wget https://github.com/taskctl/taskctl/releases/download/${{ variables.TaskctlVersion }}/taskctl_${{ variables.TaskctlVersion }}_linux_amd64.tar.gz -O /tmp/taskctl.tar.gz
              tar zxf /tmp/taskctl.tar.gz -C /usr/local/bin taskctl 

        # Install Stacks Envfile to generate the envfile to be used by docker
        - task: Bash@3
          displayName: Install Envfile
          inputs:
            targetType: inline
            script: |
              wget https://github.com/amido/stacks-envfile/releases/download/v${{ variables.StacksEnvfileVersion }}/stacks-envfile-linux-amd64-${{ variables.StacksEnvfileVersion }} -O /usr/local/bin/envfile
              chmod +x /usr/local/bin/envfile

        # Ensure that no outputs already exist
        - task: Bash@3
          displayName: Clean outputs
          inputs:
            targetType: inline
            script: |
              taskctl clean

        # Run the Taskctl pipeline to execute the tests
        - task: Bash@3
          displayName: Execute tests
          inputs:
            targetType: inline
            script: |
              taskctl tests:unit
              taskctl tests:coverage_report

        # Run the task to generate the PowerShell module files
        - task: Bash@3
          displayName: Generate PowerShell Module
          inputs:
            targetType: inline
            script: |
              taskctl build

        # Generate the documentation
        - task: Bash@3
          displayName: Generate Documentation
          inputs:
            targetType: inline
            script: |
              taskctl docs

        # Upload tests and the coverage results
        - task: PublishTestResults@2
          inputs:
            testResultsFormat: NUnit
            testResultsFiles: '**/pester-unittest-results.xml'
            testRunTitle: UnitTests

        - task: PublishCodeCoverageResults@1
          inputs:
            codeCoverageTool: 'Cobertura'
            summaryFileLocation: $(Build.SourcesDirectory)/outputs/tests/Cobertura.xml

        # Upload the documentation
        - task: PublishBuildArtifacts@1
          displayName: Publish Documentation
          inputs:
            pathToPublish: $(Build.SourcesDirectory)/outputs/docs
            artifactName: docs

        # Upload the module files
        - task: PublishBuildArtifacts@1
          displayName: Publish Modules
          inputs:
            pathToPublish: $(Build.SourcesDirectory)/outputs/module
            artifactName: modules

  - stage: Release

    jobs:
    
    - job: Publish
      steps:
        - checkout: self # Local use of Powershell Modules

        # Download the necessary artifacts from the previous stage
        # - documentation
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: 'docs'
            patterns: '**/*.pdf'
            path: $(Build.SourcesDirectory)/artifacts/docs
        # - module
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: 'modules'
            path: $(Build.SourcesDirectory)/artifacts/modules

        # # Install Taskctl for the build to run
        # - task: Bash@3
        #   displayName: Install Taskctl
        #   inputs:
        #     targetType: inline
        #     script: |
        #       wget https://github.com/taskctl/taskctl/releases/download/${{ variables.TaskctlVersion }}/taskctl_${{ variables.TaskctlVersion }}_linux_amd64.tar.gz -O /tmp/taskctl.tar.gz
        #       tar zxf /tmp/taskctl.tar.gz -C /usr/local/bin taskctl 

        # # Install Stacks Envfile to generate the envfile to be used by docker
        # - task: Bash@3
        #   displayName: Install Envfile
        #   inputs:
        #     targetType: inline
        #     script: |
        #       wget https://github.com/amido/stacks-envfile/releases/download/v${{ variables.StacksEnvfileVersion }}/stacks-envfile-linux-amd64-${{ variables.StacksEnvfileVersion }} -O /usr/local/bin/envfile
        #       chmod +x /usr/local/bin/envfile

        # Publish to GitHub and Build Dashboard
        - task: Bash@3
          displayName: Publish Release
          inputs:
            targetType: inline
            script: |
              taskctl release
          ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}: # On main branch runs
            env: 
              PUBLISH_RELEASE: $true
              DASHBOARD_INFLUX_TOKEN: $(DASHBOARD_INFLUX_TOKEN) # requires explicit mapping to be used as an env var

